%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 172.000000 93.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.3 (Build 17D102) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 172 93
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 172 93
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /uni03B2 put
dup 34 /equal put
dup 35 /two put
dup 36 /eight put
dup 37 /period put
dup 38 /nine put
dup 39 /degree put
dup 40 /P put
dup 41 /V put
dup 42 /space put
dup 43 /a put
dup 44 /r put
dup 45 /y put
dup 46 /o put
dup 47 /f put
dup 48 /four put
dup 49 /T put
dup 50 /S put
dup 51 /M put
dup 52 /hyphen put
dup 53 /three put
dup 54 /zero put
dup 55 /m put
dup 56 /d put
dup 57 /u put
dup 58 /l put
dup 59 /e put
dup 60 /s put
dup 61 /n put
dup 62 /i put
dup 63 /t put
dup 64 /c put
dup 65 /N put
dup 66 /h put
dup 67 /G put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<










00>] def
/CharStrings 37 dict dup begin
/.notdef 0 def
/space 1 def
/hyphen 2 def
/period 3 def
/zero 4 def
/two 5 def
/three 6 def
/four 7 def
/eight 8 def
/nine 9 def
/equal 10 def
/G 11 def
/M 12 def
/N 13 def
/P 14 def
/S 15 def
/T 16 def
/V 17 def
/a 18 def
/c 19 def
/d 20 def
/e 21 def
/f 22 def
/h 23 def
/i 24 def
/l 25 def
/m 26 def
/n 27 def
/o 28 def
/r 29 def
/s 30 def
/t 31 def
/u 32 def
/y 33 def
/degree 34 def
/uni03B2 35 def
/uni2B91 36 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4127891 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C9316BECA57231A7CB682134460003F1A5A5A2E37208486F0FD1BC1AF830B7C93F21790FC74DC9F7A90C92F50457BDC89F8F2420C9548960BA1DE47A50D07F1EAF53F012AFC6574CA0B2EFD7E9C9250AEBC0FF8CC03F982B96D30E00509FE5BE4ECDA9C6F572629E9BCDDCF5D25B502BFA327EFE9A32D8D8A37070F913FE7B43FBEE91048E5A13A83C48B4F0DB2425B9B2A5174C040F32FF69C4F640E9D93D4F056BE4F407B6BA1F28DBB6996FAE706143FE65BEFEF3C63203072D88FCCBD117765E229D82411EE97BE1CDB06E9E01D6DAF32873AB82F266443E9FEBDB943AB3D9F704394731EDC9620DC6C848D4B6931876283340673EF04D504F302757DD27C43B2864607D1D801DD43177486BC049521351C34FE5943CB554D9C352F4315F7A7A2C4036066A5A3C48BD87CA466F7EAA9A8B6E2B67176700300FDA45FDE7C12A768C6A446A7BC4E9B85C1E7C01006063D9A9C05D8F05270538BA8EAC6732978C27B8CAB74443A22AE389D9F8484DC6C5160B87545C89FF4D528800CFA3A3D2795BBE23202AE6BEBCCC9A3B5DB036AAA29852F73E6D75648E335E2966ABCF6786B06079E9C75D78AEBEE99827554E90B894B0E6DE40982938A5A37AE89E44FDEC13F027A1EFEDA4C55916CEE8E0CFE7DEA6408CC9812C4E271700510013964377F2147045FA9255C931827A82C3D650AB683DA1543655FE375D6181CBAF7094AF41C2D578905E70303B9EF96D1EE733E136FC5012428ECB936FF2CBB0F0A5BEE7F
AE8DFDD4E0786F222522158474DD0A93D4091E6ECC3B988EE57AD1562D3935E7DE2E5DDE2F480AC2BB4E58EDA87EAE14D30A4477B7CCB17B428A251DE44635FCF957D609213072C17A9DEF287253CE68A1570E742F0EA7D7CCFCBEA7966D02AC70F4DF2C388061D5B93F691C53C4B5BC6C5C4B83C7C936E9414D2D3FE9B0EC945A4FE3DACF263E4809F507EF890E3303078CB111FD4D349759FFCCF29E85D02047DFC50D48C570C60F3F99855E791039EB7580F1273219895E2439AE1CA0BEF6672A0E79B86EFB6B368F06A76E4688AFA074F08929C2B3A8323CD8237E97F1C04B2E0F49802B155A4D97EC51953F68F0D94D52858594FD3651C59F8AA55F73FBFE3DD6611D404BB7C60EB3B1A1D548B50A0BD977A36B9B411E86C90BC1FAB1A46AD2283D6A3A36EAFE48CE55FA09D5849650B79957F33B277C443E4BDD42B3E37284947FB353581FB8FA3620A710F79AA65B32D95DD61927165C6149AED90BB49B93FDC2984FFA8A20677945536AF868FAE6488F19C4F3B2DA9174F4BD240CF9E61EC709B11862CF8B6D7BA4A02C261B4FF10DE4698EA9CD2868A430A29578C943316705345E14EF1754A783C40398AFEF8344F281C6430C05324C11A15371A40F0F7028D24AE5EF32C761158681874AE04E15725D441A30FF620F0A92B08A1D56BABF126EC5447E21B6430DB6D004ACCE0DA7AE897DAABE905820FF5D84D5EE6E55F72A4138DB85FAE301CE3400FDA27A8E5AC8A64139E9E03E73A297606E1E5132E4F7F2BDC2C06E44F3472D7D2C8DEC362FDA75F605BF342C1BCB52F62D0429FB02BF5E98152138AA78D01858CDCD360EBE841D2DA5C9DC1CC564D748ECB1690CC11020AF953A54FB9084070C99B441467467279E1181EB37B4551A481DB4E9C17753987AB3F4BF4A3513BFA30D369EB7639B66FBC5DC2DE4420F41376A2662F3372182CA6A06E7E3F10B64E9A9BCFB3CEA17E813807AC15EED85C5F641FBA695236820FC27114170214121FD3AD0260BACC2C1535258B21076C57292E6FFF31387BA0692896C03E678A4808B4D4DD643CFF80ADCD0CD065AD3B89136F7D0122CCA15CB8EB6E34C0B616AB9781867792D308BC88F4828F90C97117C9DD7F4D016EC54A80D7B8A70C651A2585030CCF8B3A9463CFBD73EB8B8B32C2026DDB760F0BE82DA0B45DCBD3019E767C19258C83D405FFCDE922554BB4E6C0166658180D86A51455BEB9B200829A663D43065D4BD8938630D8F66F01B5E4341F74596598352C0DBDB90317D59FED4A70801D91FE2B01BC868B52A6280D41C0E962F13BE9ED1458DAF2C0B9C20BE7ECE0561F7A0F74B6B8BD4D4BB402C386C9DEE248497FFC3CE065059B04368039B1A539CC80FC6072567AE86134E9C07EAA5A31FB838A328C8F57D12F4F10A88E6DC179C62333C1BD8DE23525813ACA283C78BCABB
79A73BC1B14D3FE5522B4DB7F1D8EA9EBD5F2F7EE808C14F27AA8B68ED0B4B6D62B2112E2AC13C30DFC2E8CA8F412F4F5D69F9FC55BD0C26E12D6027D34169E28BD2F1B1595F2274651ECFB5A874B83377E29F3CC95BEE05EABE1C12F43CCD3EBA1D179F6C7643B8D43C84DAECFE56396069613C477A4CC67F6148262BF082629B3AEE152BA4D181E25DE2309DB769193526254CA52CFC327A68B00007C72A59DF7EC81C155231B9D5DB204D87F6D68B0A38C53FC28F20D3FB2C213F4FCFB3E1944B53B02A7FDE0950C91556D066666FDCA6333E2289021302834ABCBB2E61D987E0B4AD09237F72B06DC0CF8F5CDBBF9024EE4B70ACF3A888451E45CA1FDE037ACAD6779188B710027F8E9D2EB31B14226F4CEA6DAD26D4E8AE134C7129FECFB5380D593A1473BDF23316B8CAE19BB45FB6B2E305F40E4FB27BBD5A200ED790E48E4818CFD583CCEF0F50D7393BAEFFF4F595DEA52E37229E7FFA2866320B91DCF7BD3CC26E43308E509A0113C5632CC68E86AFF21F668D34CE877888DB99CCC6BDB0D1D4E9C82C5F7970B9515C8D09F9BF66EB1701FD068C597275453D6BEB8B3E8D4AF0CD53BBF8F9BE9A391D1C60CA2446BB2C19CE9CAF8531468B15B9C3976EDE4CF234CBC6189A6879C0FCAC4228B60A27B480CD8A9D50EBBC83170EC912E6F7DB8DF77C205AFA9FB7848508BBA2E75A1A0119A39F5A42498EE7A775E621BFF35A0EEDDE3C5916E6F5BF84E498A049E6658999F257213A2F0D741E84828D5D2CEFB320C03CB09302FF254731F4C2FF99CEF942FC8257704853D3947C508DC91BADBA8B7577F4DADD7431B426F04ED7262FB0B03DAF19601AF4838D3E233327251CC1E81EA5FF37B0DD9600F489B68B439AAABF94163D83B44D6D2A4526A6C9336859C172AF7BCFF5D1235894FBD8D15A6E43925E18B3FC6C295A9DF2439471FE978A869177A8E5393423A5EE0E3132D4205234F76488CCBE44A81977483726CD038ED3F4E6A38B5E41864E590C983DC44D78C54C3F6F1C233D7B3432AFC54DDD99A6C1577F32DF54F0E5A28E109F93CD8941358C96EB24297394384F5096D9605B04777F421313719C445BD489873E9CFD12F2886F566E5E354EC113083F747260415695D64ACB3035CCB9E8757B0D79A515E7A9E1EA6D9507AA510C98C8A2D3B8B792F8392665A75A06B87A8334F2516E51717DBB763B06C766756E26391B1622ACCE48F012F9B15049B5CDD0FC87272ED0D32735EBED11F9BD4FF252474D40D8CFC6B50DEE0A5D5D21F27BBC35BEDDA7033997D97DF86788FB2E59BC9879CFEB58F82DA0B03BE82DE6A4690664B0EC0DB3C3B55E87A28932FB4CC5BCC3B6E6740F1E6369D539B2E9DEEAD4FA9A2B406C8002FA3DDE46491D1608AF8E9B69DCA47ED65A5BCE9FDC2B4C871699057C0084044B017F9BDB715ABD057073
9E58EDA24356932FBA09EEC34C99C0CACB66E34E88C691763F7218CD5E2CFDEC7F614EA5D46918DAE6C3C4D7DE00EC9987C98CD113A319D747E7DE5E9282B788A330E574880CCA4BD2E2F1D42FF0622D0CC7D3CF8C54D147540B5FDDA1C975B633CA6A56ADA10DBBB7C9E1FAF6DBB3659B5D9F55A392B87E09B3563D1BE2AB1661584124F0A9511C37439926CB8CF6713F9BD38A0DA355CDE3176D3A3F6FF5CBAD1CB62D0A2DA2DC3B78E292841CDC9EE708EBA7D699F6932D5EA448E5F76E97DCFE585E234FDFF392051D51DC64D3ACD97873E0F3C539F60B7D1EAC2FE4E6AADA402C8349A00485EA5EE50BA90C9C89AE77998D46E38A30A20F1699BDD14EC6CDA6CC94CC7F00E902EBC7BB6C010C96D359A2633ADF8EC0C3D79FFC5169550E85A8EB8320E00D2CA316D5DC10D21BFE931E6C7FCFBE712EC91E30C0063C2F4B74647776FB6BDB84B2FE2EB88A3644370AD9EE2F84E7657122FBACBD722577D4906D67AF7FBD91B3249C451A895AE11CB12A509BC158D0F1EA2C9F5F3306D610D80B44D5FFE834B713B35E2CDB82E8E896EA3EDC93CCFA36A42C5A4411755848D2B475C45149D4BCCA8EE115558736A3A7BD811E3B2D8A2C5931C4360CFD559284BB2049A1CF0F21CDC777AEFA3138B7E41CBCD7AE02781091DBD39BD529DAE94C4797FC3B79599B60BA83470317A0666B86A3FBC722012940DC6B3C21E86D2BE17ADD299CD9D4BB82489EFBED56F5686B4AE092EA293953E7B44CB2EDF66CD8EE40DC7319DB769AF5ED120E05DA04F6B196FC91FE7DCB919DB81D0424E610F846141D497C6DCF01EB757D684C9D51EC7EE2FA167D745F1A7886EE17D472F663FE28D24660A1C948D26BA5A3415A7745DC01E1FA292358E5F3E74D132E0025ECFCB25CD264CED7FE0BDC16933472F1B2760F61214506D023C9860B6DD08C1BAA9702E27295988539908BD68D74B2D72E0B8180E55091281C532C982EC9C5233177D9797C5163D7D7D3AF73E83CFD1275D323F29FB3A5BB4B502052B6E1FECF0697BFFE062D163A5D83F798CC6D7E659B81217724751DDC8F80246F5A46AFD05BB45C8816D22F0D63FB2EE7155EB0EC38C8EC865FB5451EAFF18D5BFA0FC63A40E0A590EE207A004B2A8C2CD644ADA97A571757B1E72EE58B5B15C2A246C38FA8B7B1D0A529A84D8387349FE5892F11E9F0C1140DCAB1ECFA1569C7B15056A155397408AFC66F35B626F879D75F578AD70C12F93D53676B61727B31C1204796BB110EC5A7BB08BFB3365353C64407A2E91A496CD62F81804255DB53F121324F1B96C4AB24630FC7F33090F481EA70F040BC14A9527531C123CE02C416DE14DB58B32E22D2B53F79C0CDF9F816EF3E04DD583C30AB10E12E55AD7A13FC5479FE6DE3DA2E0120FD851381E6C52F39115BE1AA37909090909FD10523D2FDBD744E07

4AABC95C0D83E7B497207C93E7A7C92C79BA903FA03E8BF4C6D17BD85B5A607D198F5E315B51444269DE6DAFDD53F4D3A7F5B1FA0576172F051435AC8CB8E4A4D7BE40DC4771D44E68C57F58CC1C46DA5B8C5A8F6A95DBD4E0802376AD3A2C0F1FAA8CE9AA91BBA0FBC51CB27BC33107FFE1B7D361EFA16467ACEA670FF3F7E5D62685CAE00AE7425E8C506491CEEABD86EDD54CB912B2585953563191876E878023F73BB274E9D6E07156E1AD6ECCA54212E220155323AF88BB720663FAF25BF336B1B56247A068260F5A08970871CD45719E0132E278BCF23CC8632B551C90CA602329D94C79D97E64C7FB569D92329E241A38D1BBE8898916339DDA50B2152B6BD0C46739E6F9F545DDE85F6B1AA36636CE8A6ABC3346E5B817D596AB2E66E049B0F23C6A793D32E7CBDD215E458C15DDAB06AA7485E2CD11481D604B0E9243D743A4CC8C2D233522B4B624503AE0B8E56374E5C0555ECA1EE432094BFB2CA9D753C35CDD04AA74222B475F9A305FACF12F16CDACF280895443A93DB01163045E0E3342F9F4A5E8F7F9E707A0379BE634334DAA69E4F3CCB9CE5EE48987F079855DB22A738E5B4690D3C36EAF716BEAB1A39C29A606494E98E28DD8D0A28896A10E677593B7FFB2C6ED3682E8BDDA5472836192DDD00B52A1F0280C80176AA0A96700CFB7DE631F411581503F32BB5A56DA10F60766CFC4FCF3D6FDD6620F0CFAAED2D8293EBBF8FE40A0DC1D67E4AFF6529843D37BD3E38B948253CAC5734ACE6CA6EC734EBB4058671C19620249238214E422BF9FB600620FB7C39D64425321B73B2B6DE723A8F44B3A3ACFA44C46F64F67BFE5306BDD582410B04B2D0FDDB14D945E94D2C16F58A77191ABEAC9B346550FA716DFB69756EEB0BAC98FC58A4250FD17A74EF60B3865C286E431C167AD1824E9283A5922F858B517C9F9A8CD201D1C6DB0919AB071ABA6F4AC9A53D15B52512BEF03972B2CA3603B9AA35E041F1366ED9C7FCD2A9A9DFD32B18EBFC7AD8E8C22893E85DF9984B598F77E05505A2D4C52EA2DB2AFECB31C122EC0AA3E9716C69391FBA438C0DE493ADF94C68FB1DB959E13A1C45A9801D57362074DFA2DBF4FA7E5628F95DA95C00433B29CB4706B99C60591A75C5FF8FBF72407BCEE59A67739DC88451D2DB1E16D26C0F2269CD94A4B1597C6215488FF39FD477B0A8EA5C117D5E0251C3D20EFEEBB47BD7E9293BF85EB92FFD7FB600B1C77109D83BCB95826B506729B26DEC91CEF0F198DF7D3D7ADD6BF5024505FC7A3CFA20C3D0AD60D1F8AA95D8653E8CF091F7B06E2C3782B0DD7C236EB5E88734D3E5791D114CFD2110BC2E2D94DDB7FA179A53A9AA407B81105AF7FE3D533185D449160AFB65C29ACA4DE3889C9ACB68F110A9BEB0C9998600C4313E539B60C3F893A124973852C9B5835BE92F52191ADC9A53B
CA158CA311835D99EDB4D939702D11874C40FF956CE248BDEE6A119566269DDFC9C351186B9CFB767D7808C9432B78593CE1D424E52D15E741087D198048B89531659321AD698D678C44E5943E145DFFB8E39400D363B2BC44CED3850D0D077A59CD04837DC92EF0557BDCD28B09348D222945CBCE5F8C7A51E231064B86F73976A91346C416275D9D59D141CE9026B3338887FF6FEAB5432A9A696AE35E0E3BE3E2813A1A4895AF5ADD1677F02F8B0638D6E853EB77E0B0126AE1BD376072E63334AF5174CD49C22D3BD6C6BBF6C8F69D84CD61283B11570BA7A2D921A48B4A13D14066BA2DAE4C84960D4DD0A6039DA7EBF445376BA523EB91B0F458B1C5C11F59A1125D76E3E32AB69DE65E618F5A303E261B4236EF5195EB78CA4D78339A0DD071057C5A88C1B911EC582C1895ED1C61C93B406D3DCAFF40F17997C44D3FC92FF7E254FC70912893B5C6AB8DF60F815AFA664829A4DFEC8267C537DCE9E62620382A922BF13494D4FAAEDDAD6DEDC739E7714150ED39619E9287F3B80B2DF3BD0FB2D968C1C4C7A49D8FFF95B3DEBE7861C956FBA5CF3C8FDAB2EF225C7DC056FC493658B5CD4DEAC331EAABA891876D4B834D75BE6A6F901EE41E1FD2D17CF89F219E40706B4A8EA680C5195D6841E5BFCF5625F317ED85EC9FB86704F2F8C0901678AE8CD31537777FF1D4952961CF85B6FF494C5BB4611206EDD0F4DFFD4906468B3B6061696A95D0C39D30630A3EA2FAA2138D81D4828A329CEB5039686A85DA02428DB6F4D822E596F892B01E7EB9A8BC2A087535DA465458D7CBE4051512087C2B8A98FAC410B13AB0A64DECBBB34D6CA496E08C29EA7C0A0194D0EEF63E6A165F250EAF689DF2F8AE83290B0D4728898D19AA92F1F72074E79E534597C78BFC5301BED45036A79C3818B58041C5C7BAA26688D889FED3C340417C16087224EE141FA36977F009A2CCA040510DA307E2AB119951B4C4B1B4265F879BF528A55F3356F4B5F9DCFEBD1A9306DB75B969C5A048D1DF967E9FD903FD7EA4722CD0B41B5AECFCD619C7E15552F11F2153A177F5C2FDAE44A44A175621F70420A14483D7C862DFF0F392FE9E0A1866D0FD18ED6262CE62113DC566CDAE5CD1AE93B4D572B32F5F0272BD6BF50A8817F562947FFF32
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
1 J
1 j
0.60000002 i
/Cs1 SC
0.13725491 0.36862746 0 sc
q
0 0 172 93 rc
1 0 0 -1 -147 455 cm
151.50215 437.95276 m
313.73392 437.95276 l
S
0.5 w
0 0 0 sc
177.82004 416.64218 m
276.68237 364.07617 l
280.67999 371.5946 l
181.81766 424.16064 l
h
177.82004 416.64218 m
S
233.29134 397.4173 m
233.29134 437.95276 l
S
[
4
4
] 0 d
0 0.21568628 0.4627451 sc
233.29134 397.4173 m
301.71674 397.4173 l
S
[] 0 d
0 0 0 sc
228.5215 399.35623 m
228.5215 437.95276 l
S
0.69411767 0 0.10980392 sc
278.54077 393.99142 m
278.54077 393.99142 279.93546 389.10901 278.1116 384.54938 c
277.11951 382.06918 275.42892 380.31888 274.09323 379.23828 c
S
0 i
CM
126.09813 76.432358 m
126.84175 75.388557 l
127.34473 76.134895 l
h
126.09813 76.432358 m
f
0 J
0 j
1 0 0 -1 -147 455 cm
273.09811 378.56763 m
273.84177 379.61145 l
274.34473 378.86511 l
h
273.09811 378.56763 m
S
0.69411999 0 0.1098 sc
1 0 0 -1 151.55066 70.508568 cm
/F1.1[ 7 0 0 -7 0 0]sf
-14.231 2.9020004 m
(!"#$%&#')[ 3.948000 4.200000 3.892000 3.892000 1.946000 3.892000 3.892000 0.000000 ] xS
/Cs2 SC
0 sc
0.88294756 0.46947157 0.46947157 -0.88294756 82.0215 60.881603 cm
/F1.1[ 4 0 0 -4 0 0]sf
-28.6 1.4440002 m
(\(\)*+,,+-*./*0*1234566*7.89:;<)[ 2.592000 2.444000 1.112000 2.148000 1.332000 1.332000 2.148000 2.000000 1.112000 2.296000 1.184000 1.112000 2.224000 1.112000 2.296000 2.592000 3.484000 1.556000 2.224000 2.224000 2.224000 1.112000 3.412000 2.296000 2.372000 2.224000 0.888000 2.148000 0.000000 ] xS
1 0 0 -1 79.968498 9.748044 cm
/F1.1[ 6 0 0 -6 0 0]sf
-37.724998 2.4160004 m
(\(+=;:*.,>;=?;8*?.*/+@;*A.,?B)[ 3.888000 3.222000 3.336000 3.222000 1.332000 1.668000 3.444000 1.998000 1.332000 3.222000 3.336000 1.890000 3.222000 3.558000 1.668000 1.890000 3.444000 1.668000 1.776000 3.222000 3.222000 3.222000 1.668000 4.332000 3.444000 1.998000 1.890000 0.000000 ] xS
/Cs1 SC
0.13725001 0.36862999 0 sc
1 0 0 -1 13.90157 21.303162 cm
/F1.1[ 5 0 0 -5 0 0]sf
-8.3824997 1.9300003 m
(C,.9=8)[ 3.795000 1.575000 2.870000 2.780000 2.780000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
